#!/usr/bin/env node
/**
 * Possibly Unused i18n Token Finder
 * Key word: POSSIBLY
 *
 * Looks for i18n tokens that MAY be unused by the code
 * Since some tokens are generated dynamically, the list generated by this script
 * should ALWAYS be verified manually before removing any of the tokens in it
 *
 * Ghostery i18n Tools
 * http://www.ghostery.com/
 *
 * Copyright 2019 Ghostery, Inc. All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0
 */

const fs = require('fs');

const f = require('./funcs.js');
const c = require('./constants.js');

function _makeDirIfNeeded(path) {
    if (!fs.existsSync(path)) { fs.mkdirSync(path); }
}






//
//
// function findUnusedTokens () {
//     console.time('unused-i18n-token-finder');
//
//     const projects = _getProjects(CONFIG_FILE);
//     projects.forEach((project) => {
//         const tokens = _loadTokens(project);
//         const filepaths = _loadFilepaths(project.root, project.search_filepaths);
//         const unusedTokens = _findUnusedTokens(tokens, filepaths);
//         _writeResultsToDisk(project.name, unusedTokens);
//     });
//
//     console.log('\nPLEASE NOTE:');
//     console.log('Since some i18n tokens are generated dynamically,')
//     console.log('and since some others are formatted in a non-standard way,');
//     console.log('the lists generated by this script should ALWAYS');
//     console.log('be verified manually before removing any of the tokens in them.');
//     console.log('\nThe results are in ./results/[project]/unused_tokens.txt\n');
//
//     console.timeEnd('unused-i18n-token-finder');
// }




// START OF EXECUTION
f.check_node_version_and_quit_if_it_is_too_low();
f.print_cli_header();
f.verify_tool_folder_exists_and_make_it_if_it_doesnt();
f.verify_config_file_exists_and_make_a_default_one_if_it_doesnt();
// We exit at this point if the config file did not exist
// Otherwise, we keep going:
const config = f.load_config_file();
const tokens = f.load_tokens(config.defaultLocaleTokensFilepath);
const filepaths = f.load_filepaths(config.locationsToLookForTokens);
const unusedTokens = f.find_unused_tokens(tokens, filepaths);
f.save_results(unusedTokens);

// if (configFileExists) {
//     console.log("...config file found!");
//     const config = require(`${cwd}/i18n-janitor.config.js`);
//     _logOutConfig(config);
//
//     const tokens = _loadTokens(config.defaultLocaleTokensFilepath);
//     const filepaths = _loadFilepaths('.', config.locationsToLookForTokens);
//     const unusedTokens = _findUnusedTokens(tokens, filepaths);
//     console.log("UNUSED TOKENS:");
//     console.log(unusedTokens);
//
//     _writeResultsToDisk(unusedTokens);
// }
// else {
//     console.log("Config file not found.");
//     console.log("Creating default config file.");
//     _createDefaultConfigFile();
//     console.log("Default config file 'i18n-janitor.config.js' created in root directory.");
//     console.log("Please consult the file for instructions on specifying janitorial parameters.");
//     console.log("After you're happy with your configuration, run i18n-janitor again.");
// }

// // CLI
// console.log("");
// console.log("*** i18n-tools ***");
// console.log("f Find unused tokens");
// console.log("p Purge unused tokens");
// console.log("");
//
// const readline = require('readline');
//
// const rl = readline.createInterface({
//     input: process.stdin,
//     output: process.stdout,
//     prompt: 'q Quit | h Instructions: '
// });
//
// rl.prompt();
//
// rl.on('line', (line) => {
//     switch (line.trim()) {
//         case 'f':
//             console.log('looking for unused tokens...');
//             findUnusedTokens();
//             break;
//         case '2':
//             console.log('number two!');
//             break;
//         case 'Q':
//         case 'q':
//             rl.close();
//         default:
//             console.log('Please make a valid selection.');
//             break;
//     }
//     rl.prompt();
// }).on('close', () => {
//     console.log('Have a great day!');
//     process.exit(0);
// });

